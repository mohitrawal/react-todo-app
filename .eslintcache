[{"C:\\todoapp\\src\\index.js":"1","C:\\todoapp\\src\\App.js":"2","C:\\todoapp\\src\\reportWebVitals.js":"3","C:\\todoapp\\src\\listItem.js":"4","C:\\todoapp\\src\\ListItem.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":2078,"mtime":1611471646183,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":373,"mtime":1611467862152,"results":"10","hashOfConfig":"7"},{"size":929,"mtime":1611472045900,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1k4dqk3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\todoapp\\src\\index.js",[],["24","25"],"C:\\todoapp\\src\\App.js",["26"],"import React from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoItems: [],\n            currentTodo: {\n                text:'',\n                key:''\n            }\n        }\n    }\n    handleInput = (e) =>{\n        this.setState({\n            currentTodo:{\n                text:e.target.value,\n                key:Date.now()\n            }\n        })\n    }\n    saveTodo = (e) =>{\n        e.preventDefault();\n        const newItem = this.state.currentTodo;\n        if(newItem.text !== \"\") {\n            const items = [...this.state.todoItems, newItem] //Destructive assignment\n            this.setState({\n                todoItems:items,\n                currentTodo: {\n                    text:'',\n                    key:''\n                }\n            })\n        }\n    }\n    deleteTodo = (key) => {\n        const filteredItems= this.state.todoItems.filter(item => item.key!==key);\n        this.setState({\n            todoItems: filteredItems\n        });\n    }\n    setUpdate= (text,key) =>{\n        const items = this.state.todoItems;\n        items.map(item=>{      \n          if(item.key===key){\n            item.text= text;\n          }\n        })\n        this.setState({\n            todoItems: items\n        })\n    }\n    render() {\n        return(\n            <div className=\"App\">\n                <header>\n                    <form id=\"todo\" onSubmit={this.saveTodo}>\n                        <input type=\"text\" placeholder=\"Please enter text\" value={this.state.currentTodo.text} onChange={this.handleInput}/>\n                        <button type=\"submit\">Add</button>\n                    </form>\n                </header>\n                <ListItem items={this.state.todoItems} deleteItem={this.deleteTodo} setUpdate={this.setUpdate}/>\n            </div>\n        );\n    }\n}\nexport default App;\n","C:\\todoapp\\src\\reportWebVitals.js",[],"C:\\todoapp\\src\\listItem.js",["27"],"C:\\todoapp\\src\\ListItem.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":50,"column":23,"nodeType":"34","messageId":"35","endLine":50,"endColumn":25},{"ruleId":"36","severity":1,"message":"37","line":5,"column":5,"nodeType":"38","messageId":"39","endLine":7,"endColumn":6},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]